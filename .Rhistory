a <- lapply(a, round, 1)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- tolower("Hellow, hope you are doing WELL")
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
letter_list <- strsplit(sentence, "")
# Extract the vector of letters from the resulting list
letters <- letter_list[[1]]
# Use the `unique()` function to get a vector of unique letters
unique_letters <- unique(letters)
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurrences <- function(letter, letter_vec) {
length(letter_vec[letter_vec == letter])
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
freq <- as.list(sapply(unique_letters, count_occurrences, letters))
# Print the resulting list of frequencies
print(freq)
rm(list=ls())
log_func = function(x, beta_0, beta_1){
exp(beta_0+x*beta_1)/(1+exp(beta_0+x*beta_1))
}
n <- 500
beta_0 <- 1
beta_1 <- 2
set.seed(100)
x <- rnorm(n, mean = 0, sd = 1)
y_prob <- log_func(x, beta_0, beta_1)
y <- rep(0, n)
for (i in 1:n) {
set.seed(i * 2424)
y[i] <- rbinom(1, 1, y_prob[i])
}
log_reg <- glm(y ~ x, family = 'binomial')
log_reg$coefficients
N <- 2000
beta_0_vals <- rep(0, N)
beta_1_vals <- rep(0, N)
for (j in 1:N) {
beta_0 <- 1
beta_1 <- 2
set.seed(j*234)
x <- rnorm(n, mean = 0, sd = 1)
y_prob <- log_func(x, beta_0, beta_1)
y <- rep(0, n)
for (i in 1:n) {
set.seed(i * 2342)
y[i] <- rbinom(1, 1, y_prob[i])
}
log_reg <- glm(y ~ x, family = 'binomial')
beta_0_vals[j] <- log_reg$coefficients[1]
beta_1_vals[j] <- log_reg$coefficients[2]
}
hist(beta_0_vals, breaks = 14, col="skyblue")
abline(v = beta_0, col = 'red', lwd = 3.0)
hist(beta_1_vals, breaks = 16, col="skyblue")
abline(v = beta_1, col = 'red', lwd = 3.0)
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3))
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y)
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y)
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3)
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-7,7))
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-8,8), ylim = c(0,0.3), col='skyblue')
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-8,8))
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-7,7))
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
xtick <- seq(-7,7,0.5)
axis(side=1, at=xtick, labels = FALSE)
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-7,7))
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
xtick <- seq(-7,7,1)
axis(side=1, at=xtick, labels = FALSE)
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-7,7))
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
xtick <- seq(-7,7,1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,labels = xtick)
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-7,7))
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
xtick <- seq(-7,7,1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-7,7))
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
xtick <- seq(-7,7,1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, pos = 1, xpd = TRUE)
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-7,7))
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
xtick <- seq(-7,7,1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, pos = 1, xpd = TRUE)
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-7,7))
axis(side=1, at=xtick, labels = FALSE)
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
xtick <- seq(-7,7,1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick, labels = xtick, pos = 1, xpd = TRUE)
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-7,7))
axis(side=1, at=xtick, labels = FALSE)
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-7,7))
axis(side=1, at=xtick, labels = FALSE)
n <- 10000
func <- function(u) {
log(u/(1-u))
}
set.seed(2341)
x <- runif(n)
y <- func(x)
hist(y, freq = FALSE, xlim = c(-7,7), ylim = c(0,0.3), col='skyblue')
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
lines(x,y, col='red', lwd=3, xlim = c(-7,7))
x <- seq(-7, 7, 0.01)
y <- exp(x)/(1+exp(x))^2
y_cauchy <- 1/(pi*(1+x^2))
plot(x, y, type = "l", ylim = c(0, 0.8), lwd = 2)
lines(x, 2*y_cauchy, col="red", lwd = 2)
legend("topright",
legend = c("f(x)", "2*p_Cauchy(x)"),
col=c("black","red"), lwd = 2)
n = length(faithful$waiting)
X = faithful$waiting
X_sd = sd(X)
B = 10000
X_sd_BT = rep(NA, B)
for(i in 1:B){
w = sample(n,n,replace=T)
X_BT = X[w]
X_sd_BT[i] = sd(X_BT)
}
hist(X_sd_BT, col="skyblue")
abline(v=X_sd, lwd=3, col="red")
var_BT = var(X_sd_BT)
mse_BT = mean((X_sd_BT-X_sd)^2)
var_BT
mse_BT
n = length(faithful$waiting)
X = faithful$waiting
X_sd = sd(X)
B = 10000
X_sd_BT = rep(NA, B)
for(i in 1:B){
set.seed(i *234)
w = sample(n,n,replace=T)
X_BT = X[w]
X_sd_BT[i] = sd(X_BT)
}
hist(X_sd_BT, col="skyblue")
abline(v=X_sd, lwd=3, col="red")
var_BT = var(X_sd_BT)
mse_BT = mean((X_sd_BT-X_sd)^2)
var_
var_BT
mse_BT
var_BT = var(X_sd_BT)
mse_BT = mean((X_sd_BT-X_sd)^2)
n = length(faithful$waiting)
X = faithful$waiting
X_sd = sd(X)
B = 10000
X_sd_BT = rep(NA, B)
for(i in 1:B){
set.seed(i *234)
w = sample(n,n,replace=T)
X_BT = X[w]
X_sd_BT[i] = sd(X_BT)
}
hist(X_sd_BT, col="skyblue")
abline(v=X_sd, lwd=3, col="red")
var_BT = var(X_sd_BT)
mse_BT = mean((X_sd_BT-X_sd)^2)
var_BT
mse_BT
c(X_sd-qnorm(0.975)*sd(X_sd_BT),X_sd+qnorm(0.975)*sd(X_sd_BT)) # the bootstrap 95% CI using normality
quantile(X_sd_BT, c(0.025,0.975)) # the bootstrap 95% CI using the quantile
setwd("~/GitHub/STAT-403-Project")
df <- read.csv("Admission_Predict_Ver1.1.csv")
df <- read.csv("./data/Admission_Predict_Ver1.1.csv")
df
plot(df)
plot(df, pch = 19)
df <- read.csv("./data/Admission_Predict_Ver1.1.csv", stringsAsFactors = FALSE)
plot(df, pch = 19)
View(df)
library("dplyr")
View(df)
# cleaning
df <- df %>%
select(-Serial.No.)
# scatterplots
plot(df, pch = 19)
# scatterplots
scatter_sum <- plot(df, pch = 19)
source("analysis.R")
gre_dist_plot <- plot(df$GRE.Score)
gre_dist_plot <- hist(df$GRE.Score)
# summary plots
scatter_sum_plot <- plot(df, pch = 19)
gre_dist_plot <- hist(df$GRE.Score,
title = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
hist(df$GRE.Score,
title = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
hist(df$GRE.Score,
title = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
warnings()
hist(df$GRE.Score,
main = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
hist(df$GRE.Score,
breaks = 15
main = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
hist(df$GRE.Score,
breaks = 15,
main = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
hist(df$GRE.Score,
breaks = 20,
main = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
hist(df$GRE.Score,
breaks = 10,
main = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
hist(df$GRE.Score,
breaks = 20,
main = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
hist(df$GRE.Score,
breaks = 18,
main = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
hist(df$GRE.Score,
breaks = 16,
main = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
gre_mean <- mean(df$GRE.Score)
hist(df$GRE.Score,
breaks = 16,
main = "Histogram of GRE Scores",
xlab = "GRE Score",
col = "skyblue")
abline(v = gre_mean, col = "red", lwd = 3)
min(df$GRE.Score)
gre_mean
library("ggplot2")
# standardized test scores
gre_mean <- mean(df$GRE.Score)
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "white")
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue")
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue") +
geom_density(alpha = .2, fill = "#FF6666")
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "skyblue") +
geom_density(alpha = .2, fill = "#FF6666")
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue") +
ggtitle("Histogram of GRE Scores")
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 5) +
ggtitle("Histogram of GRE Scores")
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 7) +
ggtitle("Histogram of GRE Scores")
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 10) +
ggtitle("Histogram of GRE Scores")
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 3) +
ggtitle("Histogram of GRE Scores")
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 3) +
ggtitle("Histogram of GRE Scores") +
theme(plot.title = element_text(hjust = 0.5))
abline(v = gre_mean, col = "red", lwd = 3)
# standardized test scores
gre_mean <- mean(df$GRE.Score)
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 3) +
ggtitle("Histogram of GRE Scores") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = gre_mean, linetype = "dotted", color = "red")
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 3) +
ggtitle("Histogram of GRE Scores") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = gre_mean, linetype = "dotted", color = "red", size = 1.5)
ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 3) +
ggtitle("Histogram of GRE Scores") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = gre_mean, color = "red", size = 1.5)
toefl_mean <- mean(df$TOEFL.Score)
toefl_mean <- mean(df$TOEFL.Score)
toefl_hist <- ggplot(df, aes(x = TOEFL.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 3) +
ggtitle("Histogram of TOEFL Scores") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = toefl_mean, color = "red", size = 1.5)
multiplot(gre_hist, toefl_hist, cols=2)
library(gridExtra)
grid.arrange(gre_hist, toefl_hist, ncol=2)
# standardized test scores
gre_mean <- mean(df$GRE.Score)
gre_hist <- ggplot(df, aes(x = GRE.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 3) +
ggtitle("Histogram of GRE Scores") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = gre_mean, color = "red", size = 1.5)
toefl_mean <- mean(df$TOEFL.Score)
toefl_hist <- ggplot(df, aes(x = TOEFL.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 3) +
ggtitle("Histogram of TOEFL Scores") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = toefl_mean, color = "red", size = 1.5)
grid.arrange(gre_hist, toefl_hist, ncol=2)
toefl_mean <- mean(df$TOEFL.Score)
toefl_hist <- ggplot(df, aes(x = TOEFL.Score)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 2) +
ggtitle("Histogram of TOEFL Scores") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = toefl_mean, color = "red", size = 1.5)
grid.arrange(gre_hist, toefl_hist, ncol=2)
plot(df$CGPA)
plot(df$CGPA)
hist(df$CGPA)
gpa_mean <- mean(df$CGPA)
gpa_hist <- ggplot(df, aes(x = CGPA)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 2) +
ggtitle("Histogram of GPA") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = GPA_mean, color = "red", size = 1.5)
gpa_hist <- ggplot(df, aes(x = CGPA)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 2) +
ggtitle("Histogram of GPA") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = gpa_mean, color = "red", size = 1.5)
gpa_hist
gpa_hist <- ggplot(df, aes(x = CGPA)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 0.5) +
ggtitle("Histogram of GPA") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = gpa_mean, color = "red", size = 1.5)
gpa_hist
gpa_hist <- ggplot(df, aes(x = CGPA)) +
geom_histogram(color = "black", fill = "skyblue", binwidth = 0.2) +
ggtitle("Histogram of GPA") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = gpa_mean, color = "red", size = 1.5)
gpa_hist
