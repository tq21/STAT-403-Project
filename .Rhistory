GRE.Score +
TOEFL.Score +
University.Rating +
SOP +
LOR +
CGPA +
Research, data = df)
summary(multi_lin_model)
View(df)
library("caret")
source("cleaning.R")
attach(df)
multi_lin_model <- lm(Chance.of.Admit ~
GRE.Score +
TOEFL.Score +
University.Rating +
SOP +
LOR +
CGPA +
Research, data = df)
summary(multi_lin_model)
summary(multi_lin_model)$coefficient
sample_size <- floor(0.8 * nrow(df))
set.seed(2020)
train_ind <- sample(seq_len(nrow(df)), size = sample_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
multi_lin_model <- lm(Chance.of.Admit ~
GRE.Score +
TOEFL.Score +
University.Rating +
SOP +
LOR +
CGPA +
Research, data = train)
summary(multi_lin_model)
mean((test$Chance.of.Admit - predict.lm(multi_lin_model, test)) ^ 2)
pred <- predict.lm(multi_lin_model, test)
mean((test$Chance.of.Admit-pred)^2)
R.version.string
setwd("~/GitHub/STAT-403-Project")
df = read.csv("./data/Admission_Predict_Ver1.1.csv", stringsAsFactors = FALSE)
fit <- lm(Chance.of.Admit ~
GRE.Score +
TOEFL.Score +
University.Rating +
SOP +
LOR +
CGPA +
Research, data = df)
summary(fit)$r.squared
summary(fit)$adj.r.squared
#Get RMSE
rss <- c(crossprod(fit$residuals))
mse <- rss / length(fit$residuals)
rmse <- sqrt(mse)
#Cross validate results
cv <- cv.lm(df, fit, m=5, plotit=FALSE)
install.packages("DAAG")
library(DAAG)
#Cross validate results
cv <- cv.lm(df, fit, m=5, plotit=FALSE)
#Cross validate results
cv <- cv.lm(df, fit, m=5, plotit=FALSE)
cv.rmse <- sqrt(attr(cv,"ms"))
cat("RMSE for full model: ",rmse)
cat("RMSE for CV: ",cv.rmse)
cv <- cv.lm(df, fit, m=5, plotit=FALSE)
cv.rmse <- sqrt(attr(cv,"ms"))
cat("RMSE for full model: ",rmse)
cat("RMSE for CV: ",cv.rmse)
cv <- cv.lm(df, fit, m=5, plotit=FALSE)
cv.rmse <- sqrt(attr(cv,"ms"))
cat("RMSE for full model: ",rmse)
cat("RMSE for CV: ",cv.rmse)
cv <- cv.lm(df, fit, m=5, plotit=FALSE)
cv.rmse <- sqrt(attr(cv,"ms"))
cat("RMSE for full model: ",rmse)
cat("RMSE for CV: ",cv.rmse)
#Cross validate results
set.seed(241)
cv <- cv.lm(df, fit, m=5, plotit=FALSE)
cv.rmse <- sqrt(attr(cv,"ms"))
cat("RMSE for full model: ",rmse)
cat("RMSE for CV: ",cv.rmse)
set.seed(241)
cv <- cv.lm(df, fit, m=5, plotit=FALSE)
cv.rmse <- sqrt(attr(cv,"ms"))
cat("RMSE for full model: ",rmse)
cat("RMSE for CV: ",cv.rmse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
attach(df)
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
model <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
print(model)
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
library(caret)
install.packages("caret")
library(caret)
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
model <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
print(model)
model
model$metric
model$modelInfo
model$results
train.control <- trainControl(method = "cv", number = 10)
model <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
print(model)
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
model <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
model$results
set.seed(414)
train.control <- trainControl(method = "cv", number = 10)
model <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
model$results
model$RMSE
model$results$RMSE
B = 10
rmse_vals  = rep(NA, B)
for (i in 1:B) {
set.seed(1314*i)
train.control <- trainControl(method = "cv", number = 10)
model <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
rmse_vals[i] = model$results$RMSE
}
rmse_vals
B = 10
rmse_vals  = rep(NA, B)
for (i in 1:B) {
set.seed(1314*i)
train.control <- trainControl(method = "cv", number = 10)
model <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
rmse_vals[i] = model$results$RMSE^2
}
rmse_vals
B = 10
rmse_vals  = rep(NA, B)
for (i in 1:B) {
set.seed(1314*i)
train.control <- trainControl(method = "cv", number = 10)
model <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
rmse_vals[i] = model$results$RMSE
}
library(ISLR)
install.packages("ISLR")
library(ISLR)
## backward
library(ISLR)
regfit.bwd = regsubsets(Chance.of.Admit ~ ., data = df , nvmax = 5, method = "backward")
install.packages("leaps")
library(leaps)
regfit.bwd = regsubsets(Chance.of.Admit ~ ., data = df , nvmax = 5, method = "backward")
summary(regfit.bwd)
regfit.bwd = regsubsets(Chance.of.Admit ~ ., data = df, method = "backward")
summary(regfit.bwd)
source("cleaning.R")
regfit.bwd = regsubsets(Chance.of.Admit ~ ., data = df, method = "backward")
summary(regfit.bwd)
regfit.bwd = regsubsets(Chance.of.Admit ~ ., data = df)
summary(regfit.bwd)
regfit.bwd = regsubsets(Chance.of.Admit ~ ., data = df, method = "forward")
summary(regfit.bwd)
plot(regfit.bwd, scale = 'r2')
plot(regfit.bwd, scale = 'Cp')
rmse_vals  = matrix(NA, ncol = 7)
rmse_vals
B = 10
rmse_vals = matrix(NA, ncol = 7)
for (i in 1:B) {
set.seed(1314*i)
train.control <- trainControl(method = "cv", number = 10)
model_7 <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
model_6 <- train(Chance.of.Admit ~ GRE.Score,
TOEFL.Score,
University.Rating,
LOR,
CGPA,
Research, data = df, method = "lm", trControl = train.control)
model_5 <- train(Chance.of.Admit ~ GRE.Score,
TOEFL.Score,
LOR,
CGPA,
Research, data = df, method = "lm", trControl = train.control)
model_4 <- train(Chance.of.Admit ~ GRE.Score,
LOR,
CGPA,
Research, data = df, method = "lm", trControl = train.control)
model_3 <- train(Chance.of.Admit ~ GRE.Score,
LOR,
CGPA, data = df, method = "lm", trControl = train.control)
model_2 <- train(Chance.of.Admit ~ GRE.Score,
CGPA, data = df, method = "lm", trControl = train.control)
model_1 <- train(Chance.of.Admit ~ CGPA, data = df, method = "lm", trControl = train.control)
rmse_vals[,1] = model_7$results$RMSE
rmse_vals[,2] = model_6$results$RMSE
rmse_vals[,3] = model_5$results$RMSE
rmse_vals[,4] = model_4$results$RMSE
rmse_vals[,5] = model_3$results$RMSE
rmse_vals[,6] = model_2$results$RMSE
rmse_vals[,7] = model_1$results$RMSE
}
warnings()
rmse_vals
B = 10
rmse_vals = matrix(NA, ncol = 7)
for (i in 1:B) {
set.seed(1314*i)
train.control <- trainControl(method = "cv", number = 10)
model_7 <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
train.control <- trainControl(method = "cv", number = 10)
model_6 <- train(Chance.of.Admit ~ GRE.Score,
TOEFL.Score,
University.Rating,
LOR,
CGPA,
Research, data = df, method = "lm", trControl = train.control)
train.control <- trainControl(method = "cv", number = 10)
model_5 <- train(Chance.of.Admit ~ GRE.Score,
TOEFL.Score,
LOR,
CGPA,
Research, data = df, method = "lm", trControl = train.control)
train.control <- trainControl(method = "cv", number = 10)
model_4 <- train(Chance.of.Admit ~ GRE.Score,
LOR,
CGPA,
Research, data = df, method = "lm", trControl = train.control)
train.control <- trainControl(method = "cv", number = 10)
model_3 <- train(Chance.of.Admit ~ GRE.Score,
LOR,
CGPA, data = df, method = "lm", trControl = train.control)
train.control <- trainControl(method = "cv", number = 10)
model_2 <- train(Chance.of.Admit ~ GRE.Score,
CGPA, data = df, method = "lm", trControl = train.control)
train.control <- trainControl(method = "cv", number = 10)
model_1 <- train(Chance.of.Admit ~ CGPA, data = df, method = "lm", trControl = train.control)
rmse_vals[,1] = model_7$results$RMSE
rmse_vals[,2] = model_6$results$RMSE
rmse_vals[,3] = model_5$results$RMSE
rmse_vals[,4] = model_4$results$RMSE
rmse_vals[,5] = model_3$results$RMSE
rmse_vals[,6] = model_2$results$RMSE
rmse_vals[,7] = model_1$results$RMSE
}
model_6 <- train(Chance.of.Admit ~ GRE.Score,
TOEFL.Score,
University.Rating,
LOR,
CGPA,
Research, data = df, method = "lm", trControl = train.control)
train.control <- trainControl(method = "cv", number = 10)
model <- train(Chance.of.Admit ~ GRE.Score,
TOEFL.Score,
University.Rating,
LOR,
CGPA,
Research, data = df, method = "lm", trControl = train.control)
for (i in 1:B) {
set.seed(1314*i)
train.control <- trainControl(method = "cv", number = 10)
model_7 <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
model_6 <- train(Chance.of.Admit ~ GRE.Score +
TOEFL.Score +
University.Rating +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_5 <- train(Chance.of.Admit ~ GRE.Score +
TOEFL.Score +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_4 <- train(Chance.of.Admit ~ GRE.Score +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_3 <- train(Chance.of.Admit ~ GRE.Score +
LOR +
CGPA, data = df, method = "lm", trControl = train.control)
model_2 <- train(Chance.of.Admit ~ GRE.Score +
CGPA, data = df, method = "lm", trControl = train.control)
model_1 <- train(Chance.of.Admit ~ CGPA, data = df, method = "lm", trControl = train.control)
rmse_vals[,1] = model_7$results$RMSE
rmse_vals[,2] = model_6$results$RMSE
rmse_vals[,3] = model_5$results$RMSE
rmse_vals[,4] = model_4$results$RMSE
rmse_vals[,5] = model_3$results$RMSE
rmse_vals[,6] = model_2$results$RMSE
rmse_vals[,7] = model_1$results$RMSE
}
B = 10
rmse_vals = matrix(NA, ncol = 7)
for (i in 1:B) {
set.seed(1314*i)
train.control <- trainControl(method = "cv", number = 10)
model_7 <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
model_6 <- train(Chance.of.Admit ~ GRE.Score +
TOEFL.Score +
University.Rating +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_5 <- train(Chance.of.Admit ~ GRE.Score +
TOEFL.Score +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_4 <- train(Chance.of.Admit ~ GRE.Score +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_3 <- train(Chance.of.Admit ~ GRE.Score +
LOR +
CGPA, data = df, method = "lm", trControl = train.control)
model_2 <- train(Chance.of.Admit ~ GRE.Score +
CGPA, data = df, method = "lm", trControl = train.control)
model_1 <- train(Chance.of.Admit ~ CGPA, data = df, method = "lm", trControl = train.control)
}
rmse_vals[,1] = model_7$results$RMSE
rmse_vals[,2] = model_6$results$RMSE
rmse_vals[,3] = model_5$results$RMSE
rmse_vals[,4] = model_4$results$RMSE
rmse_vals[,5] = model_3$results$RMSE
rmse_vals[,6] = model_2$results$RMSE
rmse_vals[,7] = model_1$results$RMSE
rmse_vals
B = 10
rmse_vals = matrix(NA, nrow = B, ncol = 7)
for (i in 1:B) {
set.seed(1314*i)
train.control <- trainControl(method = "cv", number = 10)
model_7 <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
model_6 <- train(Chance.of.Admit ~ GRE.Score +
TOEFL.Score +
University.Rating +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_5 <- train(Chance.of.Admit ~ GRE.Score +
TOEFL.Score +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_4 <- train(Chance.of.Admit ~ GRE.Score +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_3 <- train(Chance.of.Admit ~ GRE.Score +
LOR +
CGPA, data = df, method = "lm", trControl = train.control)
model_2 <- train(Chance.of.Admit ~ GRE.Score +
CGPA, data = df, method = "lm", trControl = train.control)
model_1 <- train(Chance.of.Admit ~ CGPA, data = df, method = "lm", trControl = train.control)
rmse_vals[i,1] = model_7$results$RMSE
rmse_vals[i,2] = model_6$results$RMSE
rmse_vals[i,3] = model_5$results$RMSE
rmse_vals[i,4] = model_4$results$RMSE
rmse_vals[i,5] = model_3$results$RMSE
rmse_vals[i,6] = model_2$results$RMSE
rmse_vals[i,7] = model_1$results$RMSE
}
rmse_vals
plot(rmse_vals)
plot(rmse_vals[,1])
plot(rmse_vals[1,])
B = 10
rmse_vals = matrix(NA, nrow = B, ncol = 7)
for (i in 1:B) {
set.seed(1314*i)
train.control <- trainControl(method = "cv", number = 10)
model_7 <- train(Chance.of.Admit ~., data = df, method = "lm",
trControl = train.control)
model_6 <- train(Chance.of.Admit ~ GRE.Score +
TOEFL.Score +
University.Rating +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_5 <- train(Chance.of.Admit ~ GRE.Score +
TOEFL.Score +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_4 <- train(Chance.of.Admit ~ GRE.Score +
LOR +
CGPA +
Research, data = df, method = "lm", trControl = train.control)
model_3 <- train(Chance.of.Admit ~ GRE.Score +
LOR +
CGPA, data = df, method = "lm", trControl = train.control)
model_2 <- train(Chance.of.Admit ~ GRE.Score +
CGPA, data = df, method = "lm", trControl = train.control)
model_1 <- train(Chance.of.Admit ~ CGPA, data = df, method = "lm", trControl = train.control)
rmse_vals[i,1] = model_1$results$RMSE
rmse_vals[i,2] = model_2$results$RMSE
rmse_vals[i,3] = model_3$results$RMSE
rmse_vals[i,4] = model_4$results$RMSE
rmse_vals[i,5] = model_5$results$RMSE
rmse_vals[i,6] = model_6$results$RMSE
rmse_vals[i,7] = model_7$results$RMSE
}
plot(rmse_vals[1,])
plot(NA)
plot()
plot.new()
plot.new()
for (i in 1:B) {
lines(rmse_vals[i,], type = "l")
}
plot(rmse_vals[1,])
plot(1, type="n", xlab="", ylab="", xlim=c(1, 7), ylim=c(0, 0.08))
for (i in 1:B) {
lines(rmse_vals[i,], type = "l")
}
plot(1, type="n", xlab="", ylab="", xlim=c(1, 7), ylim=c(0.05, 0.08))
for (i in 1:B) {
lines(rmse_vals[i,], type = "l")
}
plot(1, type="n", xlab="", ylab="", xlim=c(1, 7), ylim=c(0.06, 0.08))
plot(1, type="n", xlab="", ylab="", xlim=c(1, 7), ylim=c(0.05, 0.07))
for (i in 1:B) {
lines(rmse_vals[i,], type = "l")
}
plot(1, type="n", xlab="", ylab="", xlim=c(1, 7), ylim=c(0.065, 0.07))
for (i in 1:B) {
lines(rmse_vals[i,], type = "l")
}
plot(1, type="n", xlab="", ylab="", xlim=c(1, 7), ylim=c(0.065, 0.067))
for (i in 1:B) {
lines(rmse_vals[i,], type = "l")
}
plot(1, type="n", xlab="", ylab="", xlim=c(1, 7), ylim=c(0.06, 0.067))
for (i in 1:B) {
lines(rmse_vals[i,], type = "l")
}
plot(1, type="n", xlab="", ylab="", xlim=c(1, 7), ylim=c(0.058, 0.067))
for (i in 1:B) {
lines(rmse_vals[i,], type = "l")
}
data.frame(rmse_vals)
rmse_df = data.frame(rmse_vals)
ggplot(data = rmse_df) + geom_line(aes(colour=variable))
cl <- rainbow(B)
plot(1, type="n", xlab="", ylab="", xlim=c(1, 7), ylim=c(0.058, 0.067))
for (i in 1:B) {
lines(rmse_vals[i,], type = "l", col = cl[i])
}
cl <- rainbow(B)
plot(1, type="n", xlab = "Number of features in model",
ylab = "RMSE", xlim=c(1, 7), ylim=c(0.058, 0.067))
for (i in 1:B) {
lines(rmse_vals[i,], type = "l", col = cl[i])
}
model_5 <- lm(Chance.of.Admit ~ GRE.Score +
TOEFL.Score +
LOR +
CGPA +
Research, data = df)
model_5
summary(model_5)
## train/test split, 80/20
sample_size <- floor(0.8 * nrow(df))
set.seed(2020)
train_ind <- sample(seq_len(nrow(df)), size = sample_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
model_5 <- lm(Chance.of.Admit ~ GRE.Score +
TOEFL.Score +
LOR +
CGPA +
Research, data = train)
pred <- predict.lm(model_5, test)
mean((test$Chance.of.Admit-pred)^2)
summary(model_5)
mean((test$Chance.of.Admit-pred)^2)
sample_size <- floor(0.8 * nrow(df))
set.seed(2020)
train_ind <- sample(seq_len(nrow(df)), size = sample_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
model_5 <- lm(Chance.of.Admit ~ GRE.Score +
TOEFL.Score +
LOR +
CGPA +
Research, data = train)
pred <- predict.lm(model_5, test)
mean((test$Chance.of.Admit-pred)^2)
summary(model_5)
View(df)
